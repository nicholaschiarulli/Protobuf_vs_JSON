/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package Proto;
import java.io.*;
import java.util.ArrayList;

import com.example.tutorial.ResultProto.CourseMarks;
import com.example.tutorial.ResultProto.Student;
import com.example.tutorial.ResultProto.Result;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

// class MyStudentList {  
  
//     private ArrayList<MyStudent> myStudent;
 
// }

 class MyStudent {  
  
    private String lastName;
    private String firstName;
    private ArrayList<MyCourseMarks> courseMarks; // alternative, either one is fine
    private String id;
    private String email;




    public String getLastName() {
        return lastName;
      }
    
      // Setter
      public void setLastName(String lastName) {
        this.lastName = lastName;
      }
      public String getFirstName() {
        return firstName;
      }
    
      // Setter
      public void setFirstName(String firstName) {
        this.firstName = firstName;
      }
      public ArrayList<MyCourseMarks> getCourseMarks() {
        return courseMarks;
      }
    
      // Setter
      public void setCourseMarks(ArrayList<MyCourseMarks> courseMarks) {
        this.courseMarks = courseMarks;
      }
      public String getId() {
        return id;
      }
    
      // Setter
      public void setId(String id) {
        this.id = id;
      }
      public String getEmail() {
        return email;
      }
    
      // Setter
      public void setEmail(String email) {
        this.email = email;
      }
      @Override
      public String toString() {
          return "User [id=" + id + ", name=" + firstName + lastName+ email+ courseMarks+ "]";
      }

}


 class MyCourseMarks{
    private String courseName;
    private int courseScore;
  //  private CourseMarks cM;

    // MyCourseMarks(String courseName, int courseScore){
    //     this.courseName = courseName;
    //     this.courseScore = courseScore;

    // }

    public String getCourseName() {
        return courseName;
      }
    
      // Setter
      public void setCourseName(String courseName) {
        this.courseName = courseName;
      }
      public int getCourseScore() {
        return courseScore;
      }
    
      // Setter
      public void setCourseScore(int courseScore) {
        this.courseScore = courseScore;
      }
 }






public class App {


    public static void main(String[] args) throws Exception {
       // ObjectList list = new ObjectList();
        ArrayList<MyStudent> list = new ArrayList<MyStudent>();
        Result.Builder newResult = Result.newBuilder();

        FileInputStream f = new FileInputStream(args[2]);
        BufferedReader b = new BufferedReader(new InputStreamReader(f));

        String s;
        String lastName = "";
        String name = "";
        String email = "";
        String afterLastName ="";
        String afterName ="";
        String afterEmail ="";
        String afterRoll ="";
        String rollNo = "";
        String courseName = "";
        String courseNo = "";
        String afterCourseName = "";
        String newAfterRoll = "";
        int colonCount = 0;
        int commaCount = 0;
        double startTimeSerialize =0;
        double estimatedTimeSerialize = 0;
        double startTimeDeserialize = 0;
        double estimatedTimeDeserialize = 0;
        double totalTime = 0;
      //  boolean emailExists = false;

        //System.out.println(args[0] + " "+args[1] + " "+ args[2]);

        
        //JSON SERIALIZE PART
     
         if(args[0].equals("-s") && args[1].equals("-j") || (args[0].equals("-t") && args[1].equals("-j"))){
            Gson gson = new GsonBuilder().setPrettyPrinting().create();
          
            startTimeSerialize = System.nanoTime(); 
        while((s=b.readLine())!=null) {
           // System.out.println(s);
            MyStudent myStudent = new MyStudent();
            //if(comma count is 0 or colon count is 0){
            //parse until comma then set that to name
            //parse until colon then set that to RollNo
            //comma and colon count ++
            // }
                if(commaCount==0){//id
            String [] splitStr = s.split(",",2);
            rollNo = splitStr[0];
            myStudent.setId(rollNo);
            afterRoll = splitStr[1];
                commaCount++;
                }
                if(commaCount==1){//lastname
                    String [] splitStr2 = afterRoll.split(",",2);
                    lastName = splitStr2[0];
                    myStudent.setLastName(lastName);
                    afterLastName = splitStr2[1];
                    commaCount++;
                }
                if(commaCount==2 && afterLastName.contains("@")){//firstname
                    String [] splitStr3 = afterLastName.split(",",2);
                    name = splitStr3[0];
                    myStudent.setFirstName(name);
                    afterName = splitStr3[1];
                    commaCount++;
                }
                else{
                    String [] splitStr3 = afterLastName.split(":",2);
                    name = splitStr3[0];
                    myStudent.setFirstName(name);
                    afterName = splitStr3[1];
                    colonCount++;
                    newAfterRoll = afterName;
                }
                
                if(colonCount==0){//email
                    String [] splitStr10 = afterName.split(":",2);
                    email = splitStr10[0];
                    afterEmail = splitStr10[1];
                    myStudent.setEmail(email);
                    colonCount++;
                    newAfterRoll = afterEmail;
                   // emailExists = true;
                }
   

            boolean k =true;
         
            ArrayList<MyCourseMarks> courseMarksList = new ArrayList<MyCourseMarks>();
            //parse until comma then set that to courseName
            //parse until colon then set that to courseScore
            while(k){

                    String [] splitStr4 = newAfterRoll.split(",",2);
                    courseName = splitStr4[0];
                    afterCourseName = splitStr4[1];
                    if(afterCourseName.contains(":")==false){
                        courseNo = splitStr4[1];
                       MyCourseMarks cmEnd = new MyCourseMarks();
                        cmEnd.setCourseName(courseName);
                        cmEnd.setCourseScore(Integer.parseInt(courseNo));
                        courseMarksList.add(cmEnd);
                        k=false;
                    }
                    else{
                        String [] splitStr5 = afterCourseName.split(":",2);
                        courseNo = splitStr5[0];
                        newAfterRoll = splitStr5[1];
                      //  afterRoll =newAfterRoll;
                      MyCourseMarks cm = new MyCourseMarks();
                      cm.setCourseName(courseName);
                      cm.setCourseScore(Integer.parseInt(courseNo));
                      courseMarksList.add(cm);

                    }
            }
            myStudent.setCourseMarks(courseMarksList);
         
              //  MyStudentWithoutEmail student = new MyStudentWithoutEmail(lastName, name, courseMarksList, rollNo,email);
                list.add(myStudent);
            
     
           // gson.toJson(student);
           
         
          //  System.out.println("["+list+"]");
            commaCount=0;
                colonCount=0;

       }
      // b.close();
       // ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("result.json"));
    //     PrintStream o = new PrintStream(new File("result.json"));
    //     System.setOut(o);
    //     System.out.println("["+list+"]");
    if(args[0].equals("-t") && args[1].equals("-j")){
       estimatedTimeSerialize = (System.nanoTime()) - startTimeSerialize;
       estimatedTimeSerialize = (double)estimatedTimeSerialize/1000000;

   // System.out.println(estimatedTimeSerialize);
    }
    PrintStream o = new PrintStream(new File("result.json"));
    //  PrintStream console = System.out;
      System.setOut(o);
    System.out.println(gson.toJson(list));
        
               
//System.out.println("["+list+"]");

        //  System.out.println("["+courseMarksList+"]");
    }
    if(args[0].equals("-d") && args[1].equals("-j")|| (args[0].equals("-t") && args[1].equals("-j"))){
      Gson gson1 = new Gson();
      String read = args[2];
      if(args[0].equals("-t")){
         read = "result.json";
      }
  
      try (Reader reader = new FileReader(read)) {
     
  
        startTimeDeserialize = System.nanoTime();
          MyStudent[] res = gson1.fromJson(reader, MyStudent[].class);
          
          
          PrintStream q = new PrintStream(new File("output_json.txt"));
          System.setOut(q);
          int r = 0;
          for(MyStudent stu : res) {
         
              if(stu.getEmail()==null){
                  System.out.print(stu.getId() + "," + stu.getLastName()+"," + stu.getFirstName()+":");
          
              }
              else{
                  System.out.print(stu.getId() + "," + stu.getLastName()+"," + stu.getFirstName()+","+stu.getEmail()+":");
  
              }
              int h= 0;
              for (MyCourseMarks cm : stu.getCourseMarks()) {
               if(++h == stu.getCourseMarks().size()){
                System.out.print(cm.getCourseName()+","+cm.getCourseScore());
        
               }else{
                System.out.print(cm.getCourseName()+","+cm.getCourseScore()+":");
               }
              }
              if(++r == res.length){}
              else{
              System.out.println();
              }
          }

          if(args[0].equals("-t") && args[1].equals("-j")){
            PrintStream json = new PrintStream(new File("jsonTimes1.txt"));
            System.setOut(json);
             estimatedTimeDeserialize = (System.nanoTime()) - startTimeDeserialize;
             estimatedTimeDeserialize = (double)estimatedTimeDeserialize/1000000;
             totalTime = estimatedTimeSerialize + estimatedTimeDeserialize;
              System.out.println(estimatedTimeSerialize);
              System.out.println(estimatedTimeDeserialize);
              System.out.println(totalTime);
          }
  
       } catch (IOException e) {
          e.printStackTrace();
      }
    //  b.close();
  }


    //PROTO PART
    if(args[0].equals("-s") && args[1].equals("-p") || (args[0].equals("-t") && args[1].equals("-p"))){
        while((s=b.readLine())!=null) {
          startTimeSerialize = System.nanoTime();
            Student.Builder newStudent = Student.newBuilder();

            // System.out.println(s);

            //if(comma count is 0 or colon count is 0){
            //parse until comma then set that to name
            //parse until colon then set that to RollNo
            //comma and colon count ++
            // }

            if(commaCount==0){//id
                String [] splitStr = s.split(",",2);
                rollNo = splitStr[0];
                newStudent.setId(rollNo);
                afterRoll = splitStr[1];
                    commaCount++;
                    }
                    if(commaCount==1){//lastname
                        String [] splitStr2 = afterRoll.split(",",2);
                        lastName = splitStr2[0];
                        newStudent.setLastname(lastName);
                        afterLastName = splitStr2[1];
                        commaCount++;
                    }
                    if(commaCount==2 && afterLastName.contains("@")){//firstname
                        String [] splitStr3 = afterLastName.split(",",2);
                        name = splitStr3[0];
                        newStudent.setFirstname(name);
                       // System.out.println(name);
                        afterName = splitStr3[1];
                        commaCount++;
                    }
                    else{
                        String [] splitStr3 = afterLastName.split(":",2);
                        name = splitStr3[0];
                        newStudent.setFirstname(name);
                      //  System.out.println(name);
                        afterName = splitStr3[1];
                        colonCount++;
                        newAfterRoll = afterName;
                    }
                    
                    if(colonCount==0){//email
                        String [] splitStr10 = afterName.split(":",2);
                        email = splitStr10[0];
                        newStudent.setEmail(email);
                        //System.out.println(email);

                        afterEmail = splitStr10[1];
                        colonCount++;
                        newAfterRoll = afterEmail;
                      //  emailExists = true;
                    }
       

            boolean k =true;
           // newAfterRoll = afterRoll;

            // ObjectList courseMarksList = new ObjectList();
            //parse until comma then set that to courseName
            //parse until colon then set that to courseScore
            while(k){
                CourseMarks.Builder newCourseMarks = CourseMarks.newBuilder();

                    String [] splitStr4 = newAfterRoll.split(",",2);
                    courseName = splitStr4[0];
                    newCourseMarks.setName(courseName);
                    afterCourseName = splitStr4[1];
                    if(afterCourseName.contains(":")==false){
                        courseNo = splitStr4[1];
                        newCourseMarks.setScore(Integer.parseInt(courseNo));
                        newStudent.addMarks(newCourseMarks);
                        // courseMarksList.add(cmEnd);
                        k=false;
                    }
                    else{
                        String [] splitStr5 = afterCourseName.split(":",2);
                        courseNo = splitStr5[0];
                        newAfterRoll = splitStr5[1];
                    //  afterRoll =newAfterRoll;
                    newCourseMarks.setScore(Integer.parseInt(courseNo));
                    newStudent.addMarks(newCourseMarks);

                    }
            }
            //MyStudent student = new MyStudent(name, Integer.parseInt(rollNo), courseMarksList);
            newResult.addStudent(newStudent);
        
        //  list.add(student);
        //  System.out.println("["+list+"]");
            commaCount=0;
            colonCount=0;
          
             

    }
    if(args[0].equals("-t") && args[1].equals("-p")){
      estimatedTimeSerialize = System.nanoTime() - startTimeSerialize;
       estimatedTimeSerialize = (double)estimatedTimeSerialize/1000000.0000000000;

   //System.out.println(estimatedTimeSerialize);

 // System.out.println(estimatedTimeSerialize);




   }
   // b.close();
    
    FileOutputStream output = new FileOutputStream("result_protobuf");
    newResult.build().writeTo(output);
    output.close();
}




 if(args[0].equals("-d") && args[1].equals("-p") || (args[0].equals("-t") && args[1].equals("-p"))){
  //FileInputStream f = new FileInputStream(args[2]);
  if(args[0].equals("-t")){
    f = new FileInputStream("result_protobuf");
 }
     Result res =
     Result.parseFrom(f);
     PrintStream o = new PrintStream(new File("output_protobuf.txt"));
     System.setOut(o);
    int r = 0;
    startTimeDeserialize = System.nanoTime();
     for (Student stu: res.getStudentList()) {
        
    
           
    if(stu.hasEmail()){
        System.out.print(stu.getId() + "," + stu.getLastname()+"," + stu.getFirstname()+","+stu.getEmail()+":");

    }
    else{
        System.out.print(stu.getId() + "," + stu.getLastname()+"," + stu.getFirstname()+":");

    }
        int h= 0;
      for (CourseMarks cm : stu.getMarksList()) {
       if(++h == stu.getMarksList().size()){
        System.out.print(cm.getName()+","+cm.getScore());

       }else{
        System.out.print(cm.getName()+","+cm.getScore()+":");
       }
      }
      if(++r == res.getStudentList().size()){}
      else{
      System.out.println();
      }
    }
    if(args[0].equals("-t") && args[1].equals("-p")){
      PrintStream proto = new PrintStream(new File("protoTimes1.txt"));
      System.setOut(proto);
       estimatedTimeDeserialize = (System.nanoTime()) - startTimeDeserialize;
       estimatedTimeDeserialize = (double)estimatedTimeDeserialize/1000000;
       totalTime = estimatedTimeSerialize + estimatedTimeDeserialize;
        System.out.println(estimatedTimeSerialize);
        System.out.println(estimatedTimeDeserialize);
        System.out.println(totalTime);
    }

}

b.close();

}

}

